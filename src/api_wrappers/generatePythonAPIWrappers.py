#!/usr/bin/env python2.7
#
# Copyright (C) 2013-2015 DNAnexus, Inc.
#
# This file is part of dx-toolkit (DNAnexus platform client libraries).
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may not
#   use this file except in compliance with the License. You may obtain a copy
#   of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.

from __future__ import print_function, unicode_literals

import json
import re
import sys

preamble = '''# Do not modify this file by hand.
#
# It is automatically generated by src/api_wrappers/generatePythonAPIWrappers.py.
# (Run make api_wrappers to update it.)

from __future__ import print_function, unicode_literals

import sys

from dxpy import DXHTTPRequest
'''

class_method_template = '''def {legacy_wrapper_method_name}(*args, **kwargs):
    """

    .. deprecated:: 0.42.0
       Use :func:`{wrapper_method_name}()` instead.

    """
    print("dxpy.{legacy_wrapper_method_name} is deprecated; please use {wrapper_method_name} instead.", file=sys.stderr)
    return {wrapper_method_name}(*args, **kwargs)

def {wrapper_method_name}(input_params={{}}, always_retry={retry}, **kwargs):
    """
    Invokes the {route} API method.{wiki_ref}
    """
    return DXHTTPRequest('{route}', input_params, always_retry=always_retry, **kwargs)
'''

object_method_template = '''def {legacy_wrapper_method_name}(*args, **kwargs):
    """

    .. deprecated:: 0.42.0
       Use :func:`{wrapper_method_name}()` instead.

    """
    print("dxpy.{legacy_wrapper_method_name} is deprecated; please use {wrapper_method_name} instead.", file=sys.stderr)
    return {wrapper_method_name}(*args, **kwargs)

def {wrapper_method_name}(object_id, input_params={{}}, always_retry={retry}, **kwargs):
    """
    Invokes the {route} API method.{wiki_ref}
    """
    return DXHTTPRequest('/%s/{api_method_name}' % object_id, input_params, always_retry=always_retry, **kwargs)
'''

app_object_method_template = '''def {legacy_wrapper_method_name}(*args, **kwargs):
    """

    .. deprecated:: 0.42.0
       Use :func:`{wrapper_method_name}()` instead.

    """
    print("dxpy.{legacy_wrapper_method_name} is deprecated; please use {wrapper_method_name} instead.", file=sys.stderr)
    return {wrapper_method_name}(*args, **kwargs)

def {wrapper_method_name}(app_name_or_id, alias=None, input_params={{}}, always_retry={retry}, **kwargs):
    """
    Invokes the /app-xxxx/{api_method_name} API method.{wiki_ref}
    """
    fully_qualified_version = app_name_or_id + (('/' + alias) if alias else '')
    return DXHTTPRequest('/%s/{api_method_name}' % fully_qualified_version, input_params, always_retry=always_retry, **kwargs)
'''

def make_wiki_ref(url):
    return ("\n\n    For more info, see: " + url) if url else ""

def make_class_method(wrapper_method_name, legacy_wrapper_method_name, route, retry=False, url=None):
    return class_method_template.format(wrapper_method_name=wrapper_method_name, legacy_wrapper_method_name=legacy_wrapper_method_name, route=route, retry=retry, wiki_ref=make_wiki_ref(url))

def make_object_method(wrapper_method_name, legacy_wrapper_method_name, api_method_name, route, retry=False, url=None):
    return object_method_template.format(wrapper_method_name=wrapper_method_name, legacy_wrapper_method_name=legacy_wrapper_method_name, api_method_name=api_method_name, route=route, retry=retry, wiki_ref=make_wiki_ref(url))

def make_app_object_method(wrapper_method_name, legacy_wrapper_method_name, api_method_name, retry=False, url=None):
    return app_object_method_template.format(wrapper_method_name=wrapper_method_name, legacy_wrapper_method_name=legacy_wrapper_method_name, api_method_name=api_method_name, retry=retry, wiki_ref=make_wiki_ref(url))

def camel_case_to_underscore(name):
    """
    Converts a camelCase string to a name_with_underscores.
    """
    return re.sub("[A-Z]+", lambda m: "_" + m.group(0).lower(), name, 0)

print(preamble)

for method in json.loads(sys.stdin.read()):
    route, signature, opts = method
    # TODO: remove legacy camelcase methods
    legacy_wrapper_method_name = signature.split("(")[0]
    wrapper_method_name = camel_case_to_underscore(legacy_wrapper_method_name)
    retry = "True" if (opts['retryable']) else "False"
    if (opts['objectMethod']):
        root, oid_route, api_method_name = route.split("/")
        if oid_route == 'app-xxxx':
            print(make_app_object_method(wrapper_method_name, legacy_wrapper_method_name, api_method_name, retry=retry, url=opts.get('wikiLink', None)))
        else:
            print(make_object_method(wrapper_method_name, legacy_wrapper_method_name, api_method_name, route, retry=retry, url=opts.get('wikiLink', None)))
    else:
        print(make_class_method(wrapper_method_name, legacy_wrapper_method_name, route, retry=retry, url=opts.get('wikiLink', None)))
