// Do not modify this file by hand.
//
// It is automatically generated by src/api_wrappers/generateCppAPICCWrappers.py.
// (Run make api_wrappers to update it.)

#include "api.h"
namespace dx {

  JSON analysisAddTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTags"), input_params, safe_to_retry);
  }

  JSON analysisAddTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return analysisAddTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON analysisDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON analysisDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return analysisDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON analysisRemoveTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTags"), input_params, safe_to_retry);
  }

  JSON analysisRemoveTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return analysisRemoveTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON analysisSetProperties(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setProperties"), input_params, safe_to_retry);
  }

  JSON analysisSetProperties(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return analysisSetProperties(object_id, input_params.toString(), safe_to_retry);
  }

  JSON analysisTerminate(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/terminate"), input_params, safe_to_retry);
  }

  JSON analysisTerminate(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return analysisTerminate(object_id, input_params.toString(), safe_to_retry);
  }

  JSON appAddAuthorizedUsers(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/addAuthorizedUsers"), input_params, safe_to_retry);
  }

  JSON appAddAuthorizedUsers(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appAddAuthorizedUsers(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appAddAuthorizedUsersWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appAddAuthorizedUsers(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appAddAuthorizedUsersWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appAddAuthorizedUsersWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appAddCategories(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/addCategories"), input_params, safe_to_retry);
  }

  JSON appAddCategories(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appAddCategories(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appAddCategoriesWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appAddCategories(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appAddCategoriesWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appAddCategoriesWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appAddDevelopers(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/addDevelopers"), input_params, safe_to_retry);
  }

  JSON appAddDevelopers(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appAddDevelopers(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appAddDevelopersWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appAddDevelopers(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appAddDevelopersWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appAddDevelopersWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appAddTags(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/addTags"), input_params, safe_to_retry);
  }

  JSON appAddTags(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appAddTags(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appAddTagsWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appAddTags(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appAddTagsWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appAddTagsWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appDelete(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/delete"), input_params, safe_to_retry);
  }

  JSON appDelete(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appDelete(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appDeleteWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appDelete(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appDeleteWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appDeleteWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appDescribe(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON appDescribe(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appDescribe(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appDescribeWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appDescribe(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appDescribeWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appDescribeWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appGet(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/get"), input_params, safe_to_retry);
  }

  JSON appGet(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appGet(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appGetWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appGet(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appGetWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appGetWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appInstall(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/install"), input_params, safe_to_retry);
  }

  JSON appInstall(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appInstall(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appInstallWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appInstall(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appInstallWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appInstallWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appListAuthorizedUsers(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/listAuthorizedUsers"), input_params, safe_to_retry);
  }

  JSON appListAuthorizedUsers(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appListAuthorizedUsers(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appListAuthorizedUsersWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appListAuthorizedUsers(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appListAuthorizedUsersWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appListAuthorizedUsersWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appListCategories(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/listCategories"), input_params, safe_to_retry);
  }

  JSON appListCategories(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appListCategories(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appListCategoriesWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appListCategories(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appListCategoriesWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appListCategoriesWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appListDevelopers(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/listDevelopers"), input_params, safe_to_retry);
  }

  JSON appListDevelopers(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appListDevelopers(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appListDevelopersWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appListDevelopers(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appListDevelopersWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appListDevelopersWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appPublish(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/publish"), input_params, safe_to_retry);
  }

  JSON appPublish(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appPublish(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appPublishWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appPublish(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appPublishWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appPublishWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appRemoveAuthorizedUsers(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/removeAuthorizedUsers"), input_params, safe_to_retry);
  }

  JSON appRemoveAuthorizedUsers(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appRemoveAuthorizedUsers(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appRemoveAuthorizedUsersWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appRemoveAuthorizedUsers(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appRemoveAuthorizedUsersWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appRemoveAuthorizedUsersWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appRemoveCategories(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/removeCategories"), input_params, safe_to_retry);
  }

  JSON appRemoveCategories(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appRemoveCategories(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appRemoveCategoriesWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appRemoveCategories(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appRemoveCategoriesWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appRemoveCategoriesWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appRemoveDevelopers(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/removeDevelopers"), input_params, safe_to_retry);
  }

  JSON appRemoveDevelopers(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appRemoveDevelopers(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appRemoveDevelopersWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appRemoveDevelopers(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appRemoveDevelopersWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appRemoveDevelopersWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appRemoveTags(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/removeTags"), input_params, safe_to_retry);
  }

  JSON appRemoveTags(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appRemoveTags(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appRemoveTagsWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appRemoveTags(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appRemoveTagsWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appRemoveTagsWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appRun(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/run"), input_params, safe_to_retry);
  }

  JSON appRun(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return appRun(app_id_or_name, input_params_cp.toString(), safe_to_retry);
  }

  JSON appRunWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appRun(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appRunWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return appRunWithAlias(app_name, app_alias, input_params_cp.toString(), safe_to_retry);
  }

  JSON appValidateBatch(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/validateBatch"), input_params, safe_to_retry);
  }

  JSON appValidateBatch(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appValidateBatch(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appValidateBatchWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appValidateBatch(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appValidateBatchWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appValidateBatchWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appUninstall(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/uninstall"), input_params, safe_to_retry);
  }

  JSON appUninstall(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appUninstall(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appUninstallWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appUninstall(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appUninstallWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appUninstallWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appUpdate(const std::string &app_id_or_name, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + app_id_or_name + std::string("/update"), input_params, safe_to_retry);
  }

  JSON appUpdate(const std::string &app_id_or_name, const JSON &input_params, const bool safe_to_retry) {
    return appUpdate(app_id_or_name, input_params.toString(), safe_to_retry);
  }

  JSON appUpdateWithAlias(const std::string &app_name, const std::string &app_alias, const std::string &input_params, const bool safe_to_retry) {
    return appUpdate(app_name + std::string("/") + app_alias, input_params, safe_to_retry);
  }

  JSON appUpdateWithAlias(const std::string &app_name, const std::string &app_alias, const JSON &input_params, const bool safe_to_retry) {
    return appUpdateWithAlias(app_name, app_alias, input_params.toString(), safe_to_retry);
  }

  JSON appNew(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/app/new", input_params, safe_to_retry);
  }

  JSON appNew(const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return appNew(input_params_cp.toString(), safe_to_retry);
  }

  JSON appletAddTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTags"), input_params, safe_to_retry);
  }

  JSON appletAddTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return appletAddTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON appletDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON appletDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return appletDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON appletGet(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/get"), input_params, safe_to_retry);
  }

  JSON appletGet(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return appletGet(object_id, input_params.toString(), safe_to_retry);
  }

  JSON appletGetDetails(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/getDetails"), input_params, safe_to_retry);
  }

  JSON appletGetDetails(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return appletGetDetails(object_id, input_params.toString(), safe_to_retry);
  }

  JSON appletListProjects(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/listProjects"), input_params, safe_to_retry);
  }

  JSON appletListProjects(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return appletListProjects(object_id, input_params.toString(), safe_to_retry);
  }

  JSON appletRemoveTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTags"), input_params, safe_to_retry);
  }

  JSON appletRemoveTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return appletRemoveTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON appletRename(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/rename"), input_params, safe_to_retry);
  }

  JSON appletRename(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return appletRename(object_id, input_params.toString(), safe_to_retry);
  }

  JSON appletValidateBatch(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/validateBatch"), input_params, safe_to_retry);
  }

  JSON appletValidateBatch(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return appletValidateBatch(object_id, input_params.toString(), safe_to_retry);
  }

  JSON appletRun(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/run"), input_params, safe_to_retry);
  }

  JSON appletRun(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return appletRun(object_id, input_params_cp.toString(), safe_to_retry);
  }

  JSON appletSetProperties(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setProperties"), input_params, safe_to_retry);
  }

  JSON appletSetProperties(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return appletSetProperties(object_id, input_params.toString(), safe_to_retry);
  }

  JSON appletNew(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/applet/new", input_params, safe_to_retry);
  }

  JSON appletNew(const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return appletNew(input_params_cp.toString(), safe_to_retry);
  }

  JSON containerClone(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/clone"), input_params, safe_to_retry);
  }

  JSON containerClone(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return containerClone(object_id, input_params.toString(), safe_to_retry);
  }

  JSON containerDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON containerDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return containerDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON containerDestroy(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/destroy"), input_params, safe_to_retry);
  }

  JSON containerDestroy(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return containerDestroy(object_id, input_params.toString(), safe_to_retry);
  }

  JSON containerListFolder(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/listFolder"), input_params, safe_to_retry);
  }

  JSON containerListFolder(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return containerListFolder(object_id, input_params.toString(), safe_to_retry);
  }

  JSON containerMove(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/move"), input_params, safe_to_retry);
  }

  JSON containerMove(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return containerMove(object_id, input_params.toString(), safe_to_retry);
  }

  JSON containerNewFolder(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/newFolder"), input_params, safe_to_retry);
  }

  JSON containerNewFolder(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return containerNewFolder(object_id, input_params.toString(), safe_to_retry);
  }

  JSON containerRemoveFolder(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeFolder"), input_params, safe_to_retry);
  }

  JSON containerRemoveFolder(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return containerRemoveFolder(object_id, input_params.toString(), safe_to_retry);
  }

  JSON containerRemoveObjects(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeObjects"), input_params, safe_to_retry);
  }

  JSON containerRemoveObjects(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return containerRemoveObjects(object_id, input_params.toString(), safe_to_retry);
  }

  JSON containerRenameFolder(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/renameFolder"), input_params, safe_to_retry);
  }

  JSON containerRenameFolder(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return containerRenameFolder(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseAddTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTags"), input_params, safe_to_retry);
  }

  JSON databaseAddTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseAddTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseAddTypes(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTypes"), input_params, safe_to_retry);
  }

  JSON databaseAddTypes(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseAddTypes(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON databaseDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseGetDetails(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/getDetails"), input_params, safe_to_retry);
  }

  JSON databaseGetDetails(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseGetDetails(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseListProjects(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/listProjects"), input_params, safe_to_retry);
  }

  JSON databaseListProjects(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseListProjects(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseRelocate(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/relocate"), input_params, safe_to_retry);
  }

  JSON databaseRelocate(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseRelocate(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseRemoveTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTags"), input_params, safe_to_retry);
  }

  JSON databaseRemoveTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseRemoveTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseRemoveTypes(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTypes"), input_params, safe_to_retry);
  }

  JSON databaseRemoveTypes(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseRemoveTypes(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseRename(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/rename"), input_params, safe_to_retry);
  }

  JSON databaseRename(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseRename(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseSetDetails(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setDetails"), input_params, safe_to_retry);
  }

  JSON databaseSetDetails(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseSetDetails(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseSetProperties(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setProperties"), input_params, safe_to_retry);
  }

  JSON databaseSetProperties(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseSetProperties(object_id, input_params.toString(), safe_to_retry);
  }

  JSON databaseSetVisibility(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setVisibility"), input_params, safe_to_retry);
  }

  JSON databaseSetVisibility(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return databaseSetVisibility(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileAddTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTags"), input_params, safe_to_retry);
  }

  JSON fileAddTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileAddTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileAddTypes(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTypes"), input_params, safe_to_retry);
  }

  JSON fileAddTypes(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileAddTypes(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileClose(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/close"), input_params, safe_to_retry);
  }

  JSON fileClose(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileClose(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON fileDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileDownload(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/download"), input_params, safe_to_retry);
  }

  JSON fileDownload(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileDownload(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileGetDetails(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/getDetails"), input_params, safe_to_retry);
  }

  JSON fileGetDetails(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileGetDetails(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileListProjects(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/listProjects"), input_params, safe_to_retry);
  }

  JSON fileListProjects(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileListProjects(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileRemoveTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTags"), input_params, safe_to_retry);
  }

  JSON fileRemoveTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileRemoveTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileRemoveTypes(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTypes"), input_params, safe_to_retry);
  }

  JSON fileRemoveTypes(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileRemoveTypes(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileRename(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/rename"), input_params, safe_to_retry);
  }

  JSON fileRename(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileRename(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileSetDetails(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setDetails"), input_params, safe_to_retry);
  }

  JSON fileSetDetails(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileSetDetails(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileSetProperties(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setProperties"), input_params, safe_to_retry);
  }

  JSON fileSetProperties(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileSetProperties(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileSetVisibility(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setVisibility"), input_params, safe_to_retry);
  }

  JSON fileSetVisibility(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileSetVisibility(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileUpload(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/upload"), input_params, safe_to_retry);
  }

  JSON fileUpload(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return fileUpload(object_id, input_params.toString(), safe_to_retry);
  }

  JSON fileNew(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/file/new", input_params, safe_to_retry);
  }

  JSON fileNew(const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return fileNew(input_params_cp.toString(), safe_to_retry);
  }

  JSON globalWorkflowAddAuthorizedUsers(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addAuthorizedUsers"), input_params, safe_to_retry);
  }

  JSON globalWorkflowAddAuthorizedUsers(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowAddAuthorizedUsers(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowAddCategories(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addCategories"), input_params, safe_to_retry);
  }

  JSON globalWorkflowAddCategories(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowAddCategories(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowAddDevelopers(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addDevelopers"), input_params, safe_to_retry);
  }

  JSON globalWorkflowAddDevelopers(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowAddDevelopers(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowAddTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTags"), input_params, safe_to_retry);
  }

  JSON globalWorkflowAddTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowAddTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowDelete(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/delete"), input_params, safe_to_retry);
  }

  JSON globalWorkflowDelete(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowDelete(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON globalWorkflowDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowListAuthorizedUsers(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/listAuthorizedUsers"), input_params, safe_to_retry);
  }

  JSON globalWorkflowListAuthorizedUsers(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowListAuthorizedUsers(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowListCategories(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/listCategories"), input_params, safe_to_retry);
  }

  JSON globalWorkflowListCategories(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowListCategories(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowListDevelopers(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/listDevelopers"), input_params, safe_to_retry);
  }

  JSON globalWorkflowListDevelopers(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowListDevelopers(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowPublish(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/publish"), input_params, safe_to_retry);
  }

  JSON globalWorkflowPublish(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowPublish(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowRemoveAuthorizedUsers(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeAuthorizedUsers"), input_params, safe_to_retry);
  }

  JSON globalWorkflowRemoveAuthorizedUsers(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowRemoveAuthorizedUsers(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowRemoveCategories(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeCategories"), input_params, safe_to_retry);
  }

  JSON globalWorkflowRemoveCategories(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowRemoveCategories(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowRemoveDevelopers(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeDevelopers"), input_params, safe_to_retry);
  }

  JSON globalWorkflowRemoveDevelopers(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowRemoveDevelopers(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowRemoveTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTags"), input_params, safe_to_retry);
  }

  JSON globalWorkflowRemoveTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowRemoveTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowRun(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/run"), input_params, safe_to_retry);
  }

  JSON globalWorkflowRun(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return globalWorkflowRun(object_id, input_params_cp.toString(), safe_to_retry);
  }

  JSON globalWorkflowUpdate(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/update"), input_params, safe_to_retry);
  }

  JSON globalWorkflowUpdate(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return globalWorkflowUpdate(object_id, input_params.toString(), safe_to_retry);
  }

  JSON globalWorkflowNew(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/globalworkflow/new", input_params, safe_to_retry);
  }

  JSON globalWorkflowNew(const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return globalWorkflowNew(input_params_cp.toString(), safe_to_retry);
  }

  JSON gtableAddRows(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addRows"), input_params, safe_to_retry);
  }

  JSON gtableAddRows(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableAddRows(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableAddTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTags"), input_params, safe_to_retry);
  }

  JSON gtableAddTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableAddTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableAddTypes(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTypes"), input_params, safe_to_retry);
  }

  JSON gtableAddTypes(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableAddTypes(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableClose(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/close"), input_params, safe_to_retry);
  }

  JSON gtableClose(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableClose(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON gtableDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableGet(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/get"), input_params, safe_to_retry);
  }

  JSON gtableGet(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableGet(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableGetDetails(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/getDetails"), input_params, safe_to_retry);
  }

  JSON gtableGetDetails(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableGetDetails(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableListProjects(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/listProjects"), input_params, safe_to_retry);
  }

  JSON gtableListProjects(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableListProjects(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableNextPart(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/nextPart"), input_params, safe_to_retry);
  }

  JSON gtableNextPart(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableNextPart(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableRemoveTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTags"), input_params, safe_to_retry);
  }

  JSON gtableRemoveTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableRemoveTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableRemoveTypes(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTypes"), input_params, safe_to_retry);
  }

  JSON gtableRemoveTypes(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableRemoveTypes(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableRename(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/rename"), input_params, safe_to_retry);
  }

  JSON gtableRename(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableRename(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableSetDetails(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setDetails"), input_params, safe_to_retry);
  }

  JSON gtableSetDetails(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableSetDetails(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableSetProperties(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setProperties"), input_params, safe_to_retry);
  }

  JSON gtableSetProperties(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableSetProperties(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableSetVisibility(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setVisibility"), input_params, safe_to_retry);
  }

  JSON gtableSetVisibility(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return gtableSetVisibility(object_id, input_params.toString(), safe_to_retry);
  }

  JSON gtableNew(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/gtable/new", input_params, safe_to_retry);
  }

  JSON gtableNew(const JSON &input_params, const bool safe_to_retry) {
    return gtableNew(input_params.toString(), safe_to_retry);
  }

  JSON jobAddTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTags"), input_params, safe_to_retry);
  }

  JSON jobAddTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return jobAddTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON jobDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON jobDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return jobDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON jobGetLog(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/getLog"), input_params, safe_to_retry);
  }

  JSON jobGetLog(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return jobGetLog(object_id, input_params.toString(), safe_to_retry);
  }

  JSON jobRemoveTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTags"), input_params, safe_to_retry);
  }

  JSON jobRemoveTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return jobRemoveTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON jobSetProperties(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setProperties"), input_params, safe_to_retry);
  }

  JSON jobSetProperties(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return jobSetProperties(object_id, input_params.toString(), safe_to_retry);
  }

  JSON jobTerminate(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/terminate"), input_params, safe_to_retry);
  }

  JSON jobTerminate(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return jobTerminate(object_id, input_params.toString(), safe_to_retry);
  }

  JSON jobNew(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/job/new", input_params, safe_to_retry);
  }

  JSON jobNew(const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return jobNew(input_params_cp.toString(), safe_to_retry);
  }

  JSON notificationsGet(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/notifications/get", input_params, safe_to_retry);
  }

  JSON notificationsGet(const JSON &input_params, const bool safe_to_retry) {
    return notificationsGet(input_params.toString(), safe_to_retry);
  }

  JSON notificationsMarkRead(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/notifications/markRead", input_params, safe_to_retry);
  }

  JSON notificationsMarkRead(const JSON &input_params, const bool safe_to_retry) {
    return notificationsMarkRead(input_params.toString(), safe_to_retry);
  }

  JSON orgDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON orgDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return orgDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON orgFindMembers(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/findMembers"), input_params, safe_to_retry);
  }

  JSON orgFindMembers(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return orgFindMembers(object_id, input_params.toString(), safe_to_retry);
  }

  JSON orgFindProjects(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/findProjects"), input_params, safe_to_retry);
  }

  JSON orgFindProjects(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return orgFindProjects(object_id, input_params.toString(), safe_to_retry);
  }

  JSON orgFindApps(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/findApps"), input_params, safe_to_retry);
  }

  JSON orgFindApps(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return orgFindApps(object_id, input_params.toString(), safe_to_retry);
  }

  JSON orgInvite(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/invite"), input_params, safe_to_retry);
  }

  JSON orgInvite(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return orgInvite(object_id, input_params.toString(), safe_to_retry);
  }

  JSON orgRemoveMember(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeMember"), input_params, safe_to_retry);
  }

  JSON orgRemoveMember(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return orgRemoveMember(object_id, input_params.toString(), safe_to_retry);
  }

  JSON orgSetMemberAccess(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setMemberAccess"), input_params, safe_to_retry);
  }

  JSON orgSetMemberAccess(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return orgSetMemberAccess(object_id, input_params.toString(), safe_to_retry);
  }

  JSON orgUpdate(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/update"), input_params, safe_to_retry);
  }

  JSON orgUpdate(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return orgUpdate(object_id, input_params.toString(), safe_to_retry);
  }

  JSON orgNew(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/org/new", input_params, safe_to_retry);
  }

  JSON orgNew(const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return orgNew(input_params_cp.toString(), safe_to_retry);
  }

  JSON projectAddTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTags"), input_params, safe_to_retry);
  }

  JSON projectAddTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectAddTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectClone(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/clone"), input_params, safe_to_retry);
  }

  JSON projectClone(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectClone(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectDecreasePermissions(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/decreasePermissions"), input_params, safe_to_retry);
  }

  JSON projectDecreasePermissions(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectDecreasePermissions(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON projectDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectDestroy(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/destroy"), input_params, safe_to_retry);
  }

  JSON projectDestroy(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectDestroy(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectInvite(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/invite"), input_params, safe_to_retry);
  }

  JSON projectInvite(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectInvite(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectLeave(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/leave"), input_params, safe_to_retry);
  }

  JSON projectLeave(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectLeave(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectListFolder(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/listFolder"), input_params, safe_to_retry);
  }

  JSON projectListFolder(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectListFolder(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectMove(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/move"), input_params, safe_to_retry);
  }

  JSON projectMove(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectMove(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectNewFolder(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/newFolder"), input_params, safe_to_retry);
  }

  JSON projectNewFolder(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectNewFolder(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectRemoveFolder(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeFolder"), input_params, safe_to_retry);
  }

  JSON projectRemoveFolder(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectRemoveFolder(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectRemoveObjects(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeObjects"), input_params, safe_to_retry);
  }

  JSON projectRemoveObjects(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectRemoveObjects(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectRemoveTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTags"), input_params, safe_to_retry);
  }

  JSON projectRemoveTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectRemoveTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectRenameFolder(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/renameFolder"), input_params, safe_to_retry);
  }

  JSON projectRenameFolder(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectRenameFolder(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectSetProperties(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setProperties"), input_params, safe_to_retry);
  }

  JSON projectSetProperties(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectSetProperties(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectTransfer(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/transfer"), input_params, safe_to_retry);
  }

  JSON projectTransfer(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectTransfer(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectUpdate(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/update"), input_params, safe_to_retry);
  }

  JSON projectUpdate(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectUpdate(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectUpdateSponsorship(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/updateSponsorship"), input_params, safe_to_retry);
  }

  JSON projectUpdateSponsorship(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return projectUpdateSponsorship(object_id, input_params.toString(), safe_to_retry);
  }

  JSON projectNew(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/project/new", input_params, safe_to_retry);
  }

  JSON projectNew(const JSON &input_params, const bool safe_to_retry) {
    return projectNew(input_params.toString(), safe_to_retry);
  }

  JSON recordAddTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTags"), input_params, safe_to_retry);
  }

  JSON recordAddTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordAddTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordAddTypes(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTypes"), input_params, safe_to_retry);
  }

  JSON recordAddTypes(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordAddTypes(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordClose(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/close"), input_params, safe_to_retry);
  }

  JSON recordClose(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordClose(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON recordDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordGetDetails(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/getDetails"), input_params, safe_to_retry);
  }

  JSON recordGetDetails(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordGetDetails(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordListProjects(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/listProjects"), input_params, safe_to_retry);
  }

  JSON recordListProjects(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordListProjects(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordRemoveTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTags"), input_params, safe_to_retry);
  }

  JSON recordRemoveTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordRemoveTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordRemoveTypes(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTypes"), input_params, safe_to_retry);
  }

  JSON recordRemoveTypes(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordRemoveTypes(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordRename(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/rename"), input_params, safe_to_retry);
  }

  JSON recordRename(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordRename(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordSetDetails(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setDetails"), input_params, safe_to_retry);
  }

  JSON recordSetDetails(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordSetDetails(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordSetProperties(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setProperties"), input_params, safe_to_retry);
  }

  JSON recordSetProperties(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordSetProperties(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordSetVisibility(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setVisibility"), input_params, safe_to_retry);
  }

  JSON recordSetVisibility(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return recordSetVisibility(object_id, input_params.toString(), safe_to_retry);
  }

  JSON recordNew(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/record/new", input_params, safe_to_retry);
  }

  JSON recordNew(const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return recordNew(input_params_cp.toString(), safe_to_retry);
  }

  JSON systemDescribeDataObjects(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/describeDataObjects", input_params, safe_to_retry);
  }

  JSON systemDescribeDataObjects(const JSON &input_params, const bool safe_to_retry) {
    return systemDescribeDataObjects(input_params.toString(), safe_to_retry);
  }

  JSON systemDescribeExecutions(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/describeExecutions", input_params, safe_to_retry);
  }

  JSON systemDescribeExecutions(const JSON &input_params, const bool safe_to_retry) {
    return systemDescribeExecutions(input_params.toString(), safe_to_retry);
  }

  JSON systemDescribeProjects(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/describeProjects", input_params, safe_to_retry);
  }

  JSON systemDescribeProjects(const JSON &input_params, const bool safe_to_retry) {
    return systemDescribeProjects(input_params.toString(), safe_to_retry);
  }

  JSON systemFindAffiliates(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findAffiliates", input_params, safe_to_retry);
  }

  JSON systemFindAffiliates(const JSON &input_params, const bool safe_to_retry) {
    return systemFindAffiliates(input_params.toString(), safe_to_retry);
  }

  JSON systemFindApps(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findApps", input_params, safe_to_retry);
  }

  JSON systemFindApps(const JSON &input_params, const bool safe_to_retry) {
    return systemFindApps(input_params.toString(), safe_to_retry);
  }

  JSON systemFindDataObjects(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findDataObjects", input_params, safe_to_retry);
  }

  JSON systemFindDataObjects(const JSON &input_params, const bool safe_to_retry) {
    return systemFindDataObjects(input_params.toString(), safe_to_retry);
  }

  JSON systemFindGlobalWorkflows(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findGlobalWorkflows", input_params, safe_to_retry);
  }

  JSON systemFindGlobalWorkflows(const JSON &input_params, const bool safe_to_retry) {
    return systemFindGlobalWorkflows(input_params.toString(), safe_to_retry);
  }

  JSON systemResolveDataObjects(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/resolveDataObjects", input_params, safe_to_retry);
  }

  JSON systemResolveDataObjects(const JSON &input_params, const bool safe_to_retry) {
    return systemResolveDataObjects(input_params.toString(), safe_to_retry);
  }

  JSON systemFindExecutions(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findExecutions", input_params, safe_to_retry);
  }

  JSON systemFindExecutions(const JSON &input_params, const bool safe_to_retry) {
    return systemFindExecutions(input_params.toString(), safe_to_retry);
  }

  JSON systemFindAnalyses(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findAnalyses", input_params, safe_to_retry);
  }

  JSON systemFindAnalyses(const JSON &input_params, const bool safe_to_retry) {
    return systemFindAnalyses(input_params.toString(), safe_to_retry);
  }

  JSON systemFindDatabases(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findDatabases", input_params, safe_to_retry);
  }

  JSON systemFindDatabases(const JSON &input_params, const bool safe_to_retry) {
    return systemFindDatabases(input_params.toString(), safe_to_retry);
  }

  JSON systemFindJobs(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findJobs", input_params, safe_to_retry);
  }

  JSON systemFindJobs(const JSON &input_params, const bool safe_to_retry) {
    return systemFindJobs(input_params.toString(), safe_to_retry);
  }

  JSON systemFindProjects(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findProjects", input_params, safe_to_retry);
  }

  JSON systemFindProjects(const JSON &input_params, const bool safe_to_retry) {
    return systemFindProjects(input_params.toString(), safe_to_retry);
  }

  JSON systemFindUsers(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findUsers", input_params, safe_to_retry);
  }

  JSON systemFindUsers(const JSON &input_params, const bool safe_to_retry) {
    return systemFindUsers(input_params.toString(), safe_to_retry);
  }

  JSON systemFindProjectMembers(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findProjectMembers", input_params, safe_to_retry);
  }

  JSON systemFindProjectMembers(const JSON &input_params, const bool safe_to_retry) {
    return systemFindProjectMembers(input_params.toString(), safe_to_retry);
  }

  JSON systemFindOrgs(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/findOrgs", input_params, safe_to_retry);
  }

  JSON systemFindOrgs(const JSON &input_params, const bool safe_to_retry) {
    return systemFindOrgs(input_params.toString(), safe_to_retry);
  }

  JSON systemGenerateBatchInputs(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/generateBatchInputs", input_params, safe_to_retry);
  }

  JSON systemGenerateBatchInputs(const JSON &input_params, const bool safe_to_retry) {
    return systemGenerateBatchInputs(input_params.toString(), safe_to_retry);
  }

  JSON systemGlobalSearch(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/globalSearch", input_params, safe_to_retry);
  }

  JSON systemGlobalSearch(const JSON &input_params, const bool safe_to_retry) {
    return systemGlobalSearch(input_params.toString(), safe_to_retry);
  }

  JSON systemGreet(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/greet", input_params, safe_to_retry);
  }

  JSON systemGreet(const JSON &input_params, const bool safe_to_retry) {
    return systemGreet(input_params.toString(), safe_to_retry);
  }

  JSON systemHeaders(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/headers", input_params, safe_to_retry);
  }

  JSON systemHeaders(const JSON &input_params, const bool safe_to_retry) {
    return systemHeaders(input_params.toString(), safe_to_retry);
  }

  JSON systemShortenURL(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/shortenURL", input_params, safe_to_retry);
  }

  JSON systemShortenURL(const JSON &input_params, const bool safe_to_retry) {
    return systemShortenURL(input_params.toString(), safe_to_retry);
  }

  JSON systemWhoami(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/system/whoami", input_params, safe_to_retry);
  }

  JSON systemWhoami(const JSON &input_params, const bool safe_to_retry) {
    return systemWhoami(input_params.toString(), safe_to_retry);
  }

  JSON userDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON userDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return userDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON userUpdate(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/update"), input_params, safe_to_retry);
  }

  JSON userUpdate(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return userUpdate(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowAddStage(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addStage"), input_params, safe_to_retry);
  }

  JSON workflowAddStage(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowAddStage(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowAddTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTags"), input_params, safe_to_retry);
  }

  JSON workflowAddTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowAddTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowAddTypes(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/addTypes"), input_params, safe_to_retry);
  }

  JSON workflowAddTypes(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowAddTypes(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowClose(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/close"), input_params, safe_to_retry);
  }

  JSON workflowClose(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowClose(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowDescribe(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/describe"), input_params, safe_to_retry);
  }

  JSON workflowDescribe(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowDescribe(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowDryRun(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/dryRun"), input_params, safe_to_retry);
  }

  JSON workflowDryRun(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowDryRun(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowGetDetails(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/getDetails"), input_params, safe_to_retry);
  }

  JSON workflowGetDetails(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowGetDetails(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowIsStageCompatible(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/isStageCompatible"), input_params, safe_to_retry);
  }

  JSON workflowIsStageCompatible(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowIsStageCompatible(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowListProjects(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/listProjects"), input_params, safe_to_retry);
  }

  JSON workflowListProjects(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowListProjects(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowMoveStage(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/moveStage"), input_params, safe_to_retry);
  }

  JSON workflowMoveStage(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowMoveStage(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowOverwrite(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/overwrite"), input_params, safe_to_retry);
  }

  JSON workflowOverwrite(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowOverwrite(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowRemoveStage(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeStage"), input_params, safe_to_retry);
  }

  JSON workflowRemoveStage(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowRemoveStage(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowRemoveTags(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTags"), input_params, safe_to_retry);
  }

  JSON workflowRemoveTags(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowRemoveTags(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowRemoveTypes(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/removeTypes"), input_params, safe_to_retry);
  }

  JSON workflowRemoveTypes(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowRemoveTypes(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowRename(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/rename"), input_params, safe_to_retry);
  }

  JSON workflowRename(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowRename(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowRun(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/run"), input_params, safe_to_retry);
  }

  JSON workflowRun(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return workflowRun(object_id, input_params_cp.toString(), safe_to_retry);
  }

  JSON workflowValidateBatch(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/validateBatch"), input_params, safe_to_retry);
  }

  JSON workflowValidateBatch(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowValidateBatch(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowSetDetails(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setDetails"), input_params, safe_to_retry);
  }

  JSON workflowSetDetails(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowSetDetails(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowSetProperties(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setProperties"), input_params, safe_to_retry);
  }

  JSON workflowSetProperties(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowSetProperties(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowSetStageInputs(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setStageInputs"), input_params, safe_to_retry);
  }

  JSON workflowSetStageInputs(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowSetStageInputs(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowSetVisibility(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/setVisibility"), input_params, safe_to_retry);
  }

  JSON workflowSetVisibility(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowSetVisibility(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowUpdate(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/update"), input_params, safe_to_retry);
  }

  JSON workflowUpdate(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowUpdate(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowUpdateStageExecutable(const std::string &object_id, const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest(std::string("/") + object_id + std::string("/updateStageExecutable"), input_params, safe_to_retry);
  }

  JSON workflowUpdateStageExecutable(const std::string &object_id, const JSON &input_params, const bool safe_to_retry) {
    return workflowUpdateStageExecutable(object_id, input_params.toString(), safe_to_retry);
  }

  JSON workflowNew(const std::string &input_params, const bool safe_to_retry) {
    return DXHTTPRequest("/workflow/new", input_params, safe_to_retry);
  }

  JSON workflowNew(const JSON &input_params, const bool safe_to_retry) {
    JSON input_params_cp = Nonce::updateNonce(input_params);
    return workflowNew(input_params_cp.toString(), safe_to_retry);
  }

}
