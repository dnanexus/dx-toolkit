/* Do not modify this file by hand.
 *
 * It is automatically generated by src/api_wrappers/generateJavaAPIWrappers.py.
 * (Run make api_wrappers to update it.)
 */

package com.dnanexus;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.*;
import com.dnanexus.DXHTTPRequest;

public class DXAPI {

    public static JsonNode appAddCategories(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addCategories", inputParams);
    }

    public static JsonNode appAddDevelopers(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addDevelopers", inputParams);
    }

    public static JsonNode appAddTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTags", inputParams);
    }

    public static JsonNode appDelete(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "delete", inputParams);
    }

    public static JsonNode appDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode appGet(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "get", inputParams);
    }

    public static JsonNode appInstall(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "install", inputParams);
    }

    public static JsonNode appListCategories(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "listCategories", inputParams);
    }

    public static JsonNode appListDevelopers(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "listDevelopers", inputParams);
    }

    public static JsonNode appPublish(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "publish", inputParams);
    }

    public static JsonNode appRemoveCategories(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeCategories", inputParams);
    }

    public static JsonNode appRemoveDevelopers(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeDevelopers", inputParams);
    }

    public static JsonNode appRemoveTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTags", inputParams);
    }

    public static JsonNode appRun(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "run", inputParams);
    }

    public static JsonNode appUninstall(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "uninstall", inputParams);
    }

    public static JsonNode appUpdate(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "update", inputParams);
    }

    public static JsonNode appNew(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/app/new", inputParams);
    }

    public static JsonNode appletAddTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTags", inputParams);
    }

    public static JsonNode appletAddTypes(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTypes", inputParams);
    }

    public static JsonNode appletClose(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "close", inputParams);
    }

    public static JsonNode appletDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode appletGet(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "get", inputParams);
    }

    public static JsonNode appletGetDetails(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "getDetails", inputParams);
    }

    public static JsonNode appletListProjects(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "listProjects", inputParams);
    }

    public static JsonNode appletRemoveTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTags", inputParams);
    }

    public static JsonNode appletRemoveTypes(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTypes", inputParams);
    }

    public static JsonNode appletRename(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "rename", inputParams);
    }

    public static JsonNode appletRun(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "run", inputParams);
    }

    public static JsonNode appletSetDetails(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setDetails", inputParams);
    }

    public static JsonNode appletSetProperties(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setProperties", inputParams);
    }

    public static JsonNode appletSetVisibility(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setVisibility", inputParams);
    }

    public static JsonNode appletNew(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/applet/new", inputParams);
    }

    public static JsonNode containerClone(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "clone", inputParams);
    }

    public static JsonNode containerDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode containerDestroy(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "destroy", inputParams);
    }

    public static JsonNode containerListFolder(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "listFolder", inputParams);
    }

    public static JsonNode containerMove(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "move", inputParams);
    }

    public static JsonNode containerNewFolder(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "newFolder", inputParams);
    }

    public static JsonNode containerRemoveFolder(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeFolder", inputParams);
    }

    public static JsonNode containerRemoveObjects(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeObjects", inputParams);
    }

    public static JsonNode containerRenameFolder(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "renameFolder", inputParams);
    }

    public static JsonNode fileAddTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTags", inputParams);
    }

    public static JsonNode fileAddTypes(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTypes", inputParams);
    }

    public static JsonNode fileClose(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "close", inputParams);
    }

    public static JsonNode fileDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode fileDownload(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "download", inputParams);
    }

    public static JsonNode fileGetDetails(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "getDetails", inputParams);
    }

    public static JsonNode fileListProjects(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "listProjects", inputParams);
    }

    public static JsonNode fileRemoveTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTags", inputParams);
    }

    public static JsonNode fileRemoveTypes(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTypes", inputParams);
    }

    public static JsonNode fileRename(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "rename", inputParams);
    }

    public static JsonNode fileSetDetails(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setDetails", inputParams);
    }

    public static JsonNode fileSetProperties(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setProperties", inputParams);
    }

    public static JsonNode fileSetVisibility(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setVisibility", inputParams);
    }

    public static JsonNode fileUpload(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "upload", inputParams);
    }

    public static JsonNode fileNew(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/file/new", inputParams);
    }

    public static JsonNode gtableAddRows(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addRows", inputParams);
    }

    public static JsonNode gtableAddTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTags", inputParams);
    }

    public static JsonNode gtableAddTypes(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTypes", inputParams);
    }

    public static JsonNode gtableClose(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "close", inputParams);
    }

    public static JsonNode gtableDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode gtableExtend(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "extend", inputParams);
    }

    public static JsonNode gtableGet(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "get", inputParams);
    }

    public static JsonNode gtableGetDetails(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "getDetails", inputParams);
    }

    public static JsonNode gtableListProjects(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "listProjects", inputParams);
    }

    public static JsonNode gtableNextPart(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "nextPart", inputParams);
    }

    public static JsonNode gtableRemoveTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTags", inputParams);
    }

    public static JsonNode gtableRemoveTypes(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTypes", inputParams);
    }

    public static JsonNode gtableRename(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "rename", inputParams);
    }

    public static JsonNode gtableSetDetails(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setDetails", inputParams);
    }

    public static JsonNode gtableSetProperties(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setProperties", inputParams);
    }

    public static JsonNode gtableSetVisibility(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setVisibility", inputParams);
    }

    public static JsonNode gtableNew(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/gtable/new", inputParams);
    }

    public static JsonNode inviteAccept(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "accept", inputParams);
    }

    public static JsonNode inviteApprove(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "approve", inputParams);
    }

    public static JsonNode inviteDecline(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "decline", inputParams);
    }

    public static JsonNode inviteDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode inviteDestroy(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "destroy", inputParams);
    }

    public static JsonNode inviteReject(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "reject", inputParams);
    }

    public static JsonNode jobDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode jobStreamLog(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "streamLog", inputParams);
    }

    public static JsonNode jobTerminate(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "terminate", inputParams);
    }

    public static JsonNode jobNew(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/job/new", inputParams);
    }

    public static JsonNode notificationsGet(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/notifications/get", inputParams);
    }

    public static JsonNode notificationsMarkRead(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/notifications/markRead", inputParams);
    }

    public static JsonNode projectAddTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTags", inputParams);
    }

    public static JsonNode projectClone(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "clone", inputParams);
    }

    public static JsonNode projectDecreasePermissions(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "decreasePermissions", inputParams);
    }

    public static JsonNode projectDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode projectDestroy(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "destroy", inputParams);
    }

    public static JsonNode projectInvite(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "invite", inputParams);
    }

    public static JsonNode projectJoin(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "join", inputParams);
    }

    public static JsonNode projectLeave(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "leave", inputParams);
    }

    public static JsonNode projectListFolder(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "listFolder", inputParams);
    }

    public static JsonNode projectMove(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "move", inputParams);
    }

    public static JsonNode projectNewFolder(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "newFolder", inputParams);
    }

    public static JsonNode projectRemoveFolder(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeFolder", inputParams);
    }

    public static JsonNode projectRemoveObjects(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeObjects", inputParams);
    }

    public static JsonNode projectRemoveTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTags", inputParams);
    }

    public static JsonNode projectRenameFolder(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "renameFolder", inputParams);
    }

    public static JsonNode projectSetProperties(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setProperties", inputParams);
    }

    public static JsonNode projectSubscribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "subscribe", inputParams);
    }

    public static JsonNode projectUnsubscribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "unsubscribe", inputParams);
    }

    public static JsonNode projectUpdate(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "update", inputParams);
    }

    public static JsonNode projectNew(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/project/new", inputParams);
    }

    public static JsonNode recordAddTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTags", inputParams);
    }

    public static JsonNode recordAddTypes(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTypes", inputParams);
    }

    public static JsonNode recordClose(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "close", inputParams);
    }

    public static JsonNode recordDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode recordGetDetails(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "getDetails", inputParams);
    }

    public static JsonNode recordListProjects(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "listProjects", inputParams);
    }

    public static JsonNode recordRemoveTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTags", inputParams);
    }

    public static JsonNode recordRemoveTypes(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTypes", inputParams);
    }

    public static JsonNode recordRename(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "rename", inputParams);
    }

    public static JsonNode recordSetDetails(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setDetails", inputParams);
    }

    public static JsonNode recordSetProperties(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setProperties", inputParams);
    }

    public static JsonNode recordSetVisibility(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setVisibility", inputParams);
    }

    public static JsonNode recordNew(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/record/new", inputParams);
    }

    public static JsonNode requestApprove(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "approve", inputParams);
    }

    public static JsonNode requestDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode requestDestroy(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "destroy", inputParams);
    }

    public static JsonNode requestReject(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "reject", inputParams);
    }

    public static JsonNode systemFindAffiliates(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/findAffiliates", inputParams);
    }

    public static JsonNode systemFindApps(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/findApps", inputParams);
    }

    public static JsonNode systemFindDataObjects(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/findDataObjects", inputParams);
    }

    public static JsonNode systemFindDiscitems(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/findDiscitems", inputParams);
    }

    public static JsonNode systemFindFeeditems(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/findFeeditems", inputParams);
    }

    public static JsonNode systemFindInvites(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/findInvites", inputParams);
    }

    public static JsonNode systemFindJobs(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/findJobs", inputParams);
    }

    public static JsonNode systemFindProjects(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/findProjects", inputParams);
    }

    public static JsonNode systemFindRequests(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/findRequests", inputParams);
    }

    public static JsonNode systemFindUsers(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/findUsers", inputParams);
    }

    public static JsonNode systemFindProjectMembers(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/findProjectMembers", inputParams);
    }

    public static JsonNode systemGetLog(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/getLog", inputParams);
    }

    public static JsonNode systemGetProjectTags(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/getProjectTags", inputParams);
    }

    public static JsonNode systemGlobalSearch(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/globalSearch", inputParams);
    }

    public static JsonNode systemShortenURL(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/system/shortenURL", inputParams);
    }

    public static JsonNode tableAddColumns(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addColumns", inputParams);
    }

    public static JsonNode tableAddIndices(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addIndices", inputParams);
    }

    public static JsonNode tableAddRows(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addRows", inputParams);
    }

    public static JsonNode tableAddTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTags", inputParams);
    }

    public static JsonNode tableAddTypes(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "addTypes", inputParams);
    }

    public static JsonNode tableClose(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "close", inputParams);
    }

    public static JsonNode tableDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode tableGet(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "get", inputParams);
    }

    public static JsonNode tableGetDetails(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "getDetails", inputParams);
    }

    public static JsonNode tableListProjects(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "listProjects", inputParams);
    }

    public static JsonNode tableModifyColumn(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "modifyColumn", inputParams);
    }

    public static JsonNode tableRemoveColumns(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeColumns", inputParams);
    }

    public static JsonNode tableRemoveIndices(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeIndices", inputParams);
    }

    public static JsonNode tableRemoveRows(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeRows", inputParams);
    }

    public static JsonNode tableRemoveTags(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTags", inputParams);
    }

    public static JsonNode tableRemoveTypes(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "removeTypes", inputParams);
    }

    public static JsonNode tableRename(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "rename", inputParams);
    }

    public static JsonNode tableSetDetails(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setDetails", inputParams);
    }

    public static JsonNode tableSetProperties(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setProperties", inputParams);
    }

    public static JsonNode tableSetVisibility(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "setVisibility", inputParams);
    }

    public static JsonNode tableUpdate(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "update", inputParams);
    }

    public static JsonNode tableNew(JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/table/new", inputParams);
    }

    public static JsonNode userDescribe(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "describe", inputParams);
    }

    public static JsonNode userUpdate(String objectId, JsonNode inputParams) throws Exception {
        return new DXHTTPRequest().request("/" + objectId + "/" + "update", inputParams);
    }
}

