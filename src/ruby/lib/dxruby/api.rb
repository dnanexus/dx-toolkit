# Do not modify this file by hand.
#
# It is automatically generated by src/api_wrappers/generateRubyAPIWrappers.py.
# (Run make api_wrappers to update it.)

require 'dxruby'

module DX
  module API
    def self.app_add_categories(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/addCategories API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/addCategories
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/addCategories", input_params, opts)
    end

    def self.app_add_developers(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/addDevelopers API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/addDevelopers
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/addDevelopers", input_params, opts)
    end

    def self.app_add_tags(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/addTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/addTags
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/addTags", input_params, opts)
    end

    def self.app_delete(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/delete API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/delete
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/delete", input_params, opts)
    end

    def self.app_describe(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/describe API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/describe
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/describe", input_params, opts)
    end

    def self.app_get(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/get API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/get
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/get", input_params, opts)
    end

    def self.app_install(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/install API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/install
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/install", input_params, opts)
    end

    def self.app_list_categories(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/listCategories API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/listCategories
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/listCategories", input_params, opts)
    end

    def self.app_list_developers(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/listDevelopers API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/listDevelopers
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/listDevelopers", input_params, opts)
    end

    def self.app_publish(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/publish API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/publish
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/publish", input_params, opts)
    end

    def self.app_remove_categories(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/removeCategories API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/removeCategories
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/removeCategories", input_params, opts)
    end

    def self.app_remove_developers(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/removeDevelopers API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/removeDevelopers
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/removeDevelopers", input_params, opts)
    end

    def self.app_remove_tags(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/removeTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/removeTags
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/removeTags", input_params, opts)
    end

    def self.app_run(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/run API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/run
      opts = { "always_retry" => false }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/run", input_params, opts)
    end

    def self.app_uninstall(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/uninstall API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/uninstall
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/uninstall", input_params, opts)
    end

    def self.app_update(app_name_or_id, app_alias=nil, input_params={}, opts={})
      # Invokes the /app-xxxx/update API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app-xxxx%5B/yyyy%5D/update
      opts = { "always_retry" => true }.merge(opts)
      fully_qualified_version = app_name_or_id + (app_alias ? ('/' + app_alias) : '')
      return DX::http_request("/#{fully_qualified_version}/update", input_params, opts)
    end

    def self.app_new(input_params={}, opts={})
      # Invokes the /app/new API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Apps#API-method:-/app/new
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/app/new", input_params, opts)
    end

    def self.applet_add_tags(object_id, input_params={}, opts={})
      # Invokes the /applet-xxxx/addTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Tags#API-method%3A-%2Fclass-xxxx%2FaddTags
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/addTags", input_params, opts)
    end

    def self.applet_describe(object_id, input_params={}, opts={})
      # Invokes the /applet-xxxx/describe API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Applets and Entry Points#API-method%3A-%2Fapplet-xxxx%2Fdescribe
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/describe", input_params, opts)
    end

    def self.applet_get(object_id, input_params={}, opts={})
      # Invokes the /applet-xxxx/get API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Applets and Entry Points#API-method%3A-%2Fapplet-xxxx%2Fget
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/get", input_params, opts)
    end

    def self.applet_get_details(object_id, input_params={}, opts={})
      # Invokes the /applet-xxxx/getDetails API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Details-and-Links#API-method%3A-%2Fclass-xxxx%2FgetDetails
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/getDetails", input_params, opts)
    end

    def self.applet_list_projects(object_id, input_params={}, opts={})
      # Invokes the /applet-xxxx/listProjects API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Cloning#API-method%3A-%2Fclass-xxxx%2FlistProjects
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/listProjects", input_params, opts)
    end

    def self.applet_remove_tags(object_id, input_params={}, opts={})
      # Invokes the /applet-xxxx/removeTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Tags#API-method%3A-%2Fclass-xxxx%2FremoveTags
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeTags", input_params, opts)
    end

    def self.applet_rename(object_id, input_params={}, opts={})
      # Invokes the /applet-xxxx/rename API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Name#API-method%3A-%2Fclass-xxxx%2Frename
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/rename", input_params, opts)
    end

    def self.applet_run(object_id, input_params={}, opts={})
      # Invokes the /applet-xxxx/run API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Applets and Entry Points#API-method%3A-%2Fapplet-xxxx%2Frun
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/#{object_id}/run", input_params, opts)
    end

    def self.applet_set_properties(object_id, input_params={}, opts={})
      # Invokes the /applet-xxxx/setProperties API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Properties#API-method%3A-%2Fclass-xxxx%2FsetProperties
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/setProperties", input_params, opts)
    end

    def self.applet_new(input_params={}, opts={})
      # Invokes the /applet/new API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Applets and Entry Points#API-method%3A-%2Fapplet%2Fnew
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/applet/new", input_params, opts)
    end

    def self.container_clone(object_id, input_params={}, opts={})
      # Invokes the /container-xxxx/clone API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Cloning#API-method%3A-%2Fclass-xxxx%2Fclone
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/#{object_id}/clone", input_params, opts)
    end

    def self.container_describe(object_id, input_params={}, opts={})
      # Invokes the /container-xxxx/describe API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Containers-for-Execution#API-method%3A-%2Fcontainer-xxxx%2Fdescribe
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/describe", input_params, opts)
    end

    def self.container_destroy(object_id, input_params={}, opts={})
      # Invokes the /container-xxxx/destroy API method.
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/destroy", input_params, opts)
    end

    def self.container_list_folder(object_id, input_params={}, opts={})
      # Invokes the /container-xxxx/listFolder API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2FlistFolder
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/listFolder", input_params, opts)
    end

    def self.container_move(object_id, input_params={}, opts={})
      # Invokes the /container-xxxx/move API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2Fmove
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/#{object_id}/move", input_params, opts)
    end

    def self.container_new_folder(object_id, input_params={}, opts={})
      # Invokes the /container-xxxx/newFolder API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2FnewFolder
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/newFolder", input_params, opts)
    end

    def self.container_remove_folder(object_id, input_params={}, opts={})
      # Invokes the /container-xxxx/removeFolder API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2FremoveFolder
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeFolder", input_params, opts)
    end

    def self.container_remove_objects(object_id, input_params={}, opts={})
      # Invokes the /container-xxxx/removeObjects API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2FremoveObjects
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeObjects", input_params, opts)
    end

    def self.container_rename_folder(object_id, input_params={}, opts={})
      # Invokes the /container-xxxx/renameFolder API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2FrenameFolder
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/#{object_id}/renameFolder", input_params, opts)
    end

    def self.file_add_tags(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/addTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Tags#API-method%3A-%2Fclass-xxxx%2FaddTags
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/addTags", input_params, opts)
    end

    def self.file_add_types(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/addTypes API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Types#API-method%3A-%2Fclass-xxxx%2FaddTypes
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/addTypes", input_params, opts)
    end

    def self.file_close(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/close API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Files#API-method%3A-%2Ffile-xxxx%2Fclose
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/close", input_params, opts)
    end

    def self.file_describe(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/describe API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Files#API-method%3A-%2Ffile-xxxx%2Fdescribe
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/describe", input_params, opts)
    end

    def self.file_download(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/download API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Files#API-method%3A-%2Ffile-xxxx%2Fdownload
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/download", input_params, opts)
    end

    def self.file_get_details(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/getDetails API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Details-and-Links#API-method%3A-%2Fclass-xxxx%2FgetDetails
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/getDetails", input_params, opts)
    end

    def self.file_list_projects(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/listProjects API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Cloning#API-method%3A-%2Fclass-xxxx%2FlistProjects
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/listProjects", input_params, opts)
    end

    def self.file_remove_tags(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/removeTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Tags#API-method%3A-%2Fclass-xxxx%2FremoveTags
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeTags", input_params, opts)
    end

    def self.file_remove_types(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/removeTypes API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Types#API-method%3A-%2Fclass-xxxx%2FremoveTypes
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeTypes", input_params, opts)
    end

    def self.file_rename(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/rename API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Name#API-method%3A-%2Fclass-xxxx%2Frename
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/rename", input_params, opts)
    end

    def self.file_set_details(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/setDetails API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Details-and-Links#API-method%3A-%2Fclass-xxxx%2FsetDetails
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/setDetails", input_params, opts)
    end

    def self.file_set_properties(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/setProperties API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Properties#API-method%3A-%2Fclass-xxxx%2FsetProperties
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/setProperties", input_params, opts)
    end

    def self.file_set_visibility(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/setVisibility API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Visibility#API-method%3A-%2Fclass-xxxx%2FsetVisibility
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/setVisibility", input_params, opts)
    end

    def self.file_upload(object_id, input_params={}, opts={})
      # Invokes the /file-xxxx/upload API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Files#API-method%3A-%2Ffile-xxxx%2Fupload
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/upload", input_params, opts)
    end

    def self.file_new(input_params={}, opts={})
      # Invokes the /file/new API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Files#API-method%3A-%2Ffile%2Fnew
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/file/new", input_params, opts)
    end

    def self.gtable_add_rows(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/addRows API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/GenomicTables#API-method%3A-%2Fgtable-xxxx%2FaddRows
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/addRows", input_params, opts)
    end

    def self.gtable_add_tags(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/addTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Tags#API-method%3A-%2Fclass-xxxx%2FaddTags
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/addTags", input_params, opts)
    end

    def self.gtable_add_types(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/addTypes API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Types#API-method%3A-%2Fclass-xxxx%2FaddTypes
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/addTypes", input_params, opts)
    end

    def self.gtable_close(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/close API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/GenomicTables#API-method%3A-%2Fgtable-xxxx%2Fclose
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/close", input_params, opts)
    end

    def self.gtable_describe(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/describe API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/GenomicTables#API-method%3A-%2Fgtable-xxxx%2Fdescribe
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/describe", input_params, opts)
    end

    def self.gtable_get(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/get API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/GenomicTables#API-method%3A-%2Fgtable-xxxx%2Fget
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/get", input_params, opts)
    end

    def self.gtable_get_details(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/getDetails API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Details-and-Links#API-method%3A-%2Fclass-xxxx%2FgetDetails
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/getDetails", input_params, opts)
    end

    def self.gtable_list_projects(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/listProjects API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Cloning#API-method%3A-%2Fclass-xxxx%2FlistProjects
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/listProjects", input_params, opts)
    end

    def self.gtable_next_part(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/nextPart API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/GenomicTables#API-method%3A-%2Fgtable-xxxx%2FnextPart
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/nextPart", input_params, opts)
    end

    def self.gtable_remove_tags(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/removeTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Tags#API-method%3A-%2Fclass-xxxx%2FremoveTags
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeTags", input_params, opts)
    end

    def self.gtable_remove_types(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/removeTypes API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Types#API-method%3A-%2Fclass-xxxx%2FremoveTypes
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeTypes", input_params, opts)
    end

    def self.gtable_rename(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/rename API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Name#API-method%3A-%2Fclass-xxxx%2Frename
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/rename", input_params, opts)
    end

    def self.gtable_set_details(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/setDetails API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Details-and-Links#API-method%3A-%2Fclass-xxxx%2FsetDetails
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/setDetails", input_params, opts)
    end

    def self.gtable_set_properties(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/setProperties API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Properties#API-method%3A-%2Fclass-xxxx%2FsetProperties
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/setProperties", input_params, opts)
    end

    def self.gtable_set_visibility(object_id, input_params={}, opts={})
      # Invokes the /gtable-xxxx/setVisibility API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Visibility#API-method%3A-%2Fclass-xxxx%2FsetVisibility
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/setVisibility", input_params, opts)
    end

    def self.gtable_new(input_params={}, opts={})
      # Invokes the /gtable/new API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/GenomicTables#API-method%3A-%2Fgtable%2Fnew
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/gtable/new", input_params, opts)
    end

    def self.job_describe(object_id, input_params={}, opts={})
      # Invokes the /job-xxxx/describe API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Applets and Entry Points#API-method%3A-%2Fjob-xxxx%2Fdescribe
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/describe", input_params, opts)
    end

    def self.job_stream_log(object_id, input_params={}, opts={})
      # Invokes the /job-xxxx/streamLog API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Applets and Entry Points#API-method%3A-%2Fjob-xxxx%2FstreamLog
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/#{object_id}/streamLog", input_params, opts)
    end

    def self.job_terminate(object_id, input_params={}, opts={})
      # Invokes the /job-xxxx/terminate API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Applets and Entry Points#API-method%3A-%2Fjob-xxxx%2Fterminate
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/terminate", input_params, opts)
    end

    def self.job_new(input_params={}, opts={})
      # Invokes the /job/new API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Applets and Entry Points#API-method%3A-%2Fjob%2Fnew
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/job/new", input_params, opts)
    end

    def self.notifications_get(input_params={}, opts={})
      # Invokes the /notifications/get API method.
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/notifications/get", input_params, opts)
    end

    def self.notifications_mark_read(input_params={}, opts={})
      # Invokes the /notifications/markRead API method.
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/notifications/markRead", input_params, opts)
    end

    def self.project_add_tags(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/addTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Projects#API-method%3A-%2Fproject-xxxx%2FaddTags
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/addTags", input_params, opts)
    end

    def self.project_clone(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/clone API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Cloning#API-method%3A-%2Fclass-xxxx%2Fclone
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/#{object_id}/clone", input_params, opts)
    end

    def self.project_decrease_permissions(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/decreasePermissions API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Projects#API-method%3A-%2Fproject-xxxx%2FdecreasePermissions
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/decreasePermissions", input_params, opts)
    end

    def self.project_describe(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/describe API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Projects#API-method%3A-%2Fproject-xxxx%2Fdescribe
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/describe", input_params, opts)
    end

    def self.project_destroy(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/destroy API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Projects#API-method%3A-%2Fproject-xxxx%2Fdestroy
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/destroy", input_params, opts)
    end

    def self.project_invite(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/invite API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Invitations and Join Requests#API-method%3A-%2Fproject-xxxx%2Finvite
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/#{object_id}/invite", input_params, opts)
    end

    def self.project_leave(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/leave API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Projects#API-method%3A-%2Fproject-xxxx%2Fleave
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/leave", input_params, opts)
    end

    def self.project_list_folder(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/listFolder API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2FlistFolder
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/listFolder", input_params, opts)
    end

    def self.project_move(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/move API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2Fmove
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/#{object_id}/move", input_params, opts)
    end

    def self.project_new_folder(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/newFolder API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2FnewFolder
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/newFolder", input_params, opts)
    end

    def self.project_remove_folder(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/removeFolder API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2FremoveFolder
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeFolder", input_params, opts)
    end

    def self.project_remove_objects(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/removeObjects API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2FremoveObjects
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeObjects", input_params, opts)
    end

    def self.project_remove_tags(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/removeTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Projects#API-method%3A-%2Fproject-xxxx%2FremoveTags
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeTags", input_params, opts)
    end

    def self.project_rename_folder(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/renameFolder API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Folders-and-Deletion#API-method%3A-%2Fclass-xxxx%2FrenameFolder
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/#{object_id}/renameFolder", input_params, opts)
    end

    def self.project_set_properties(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/setProperties API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Projects#API-method%3A-%2Fproject-xxxx%2FsetProperties
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/setProperties", input_params, opts)
    end

    def self.project_update(object_id, input_params={}, opts={})
      # Invokes the /project-xxxx/update API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Projects#API-method%3A-%2Fproject-xxxx%2Fupdate
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/update", input_params, opts)
    end

    def self.project_new(input_params={}, opts={})
      # Invokes the /project/new API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Projects#API-method%3A-%2Fproject%2Fnew
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/project/new", input_params, opts)
    end

    def self.record_add_tags(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/addTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Tags#API-method%3A-%2Fclass-xxxx%2FaddTags
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/addTags", input_params, opts)
    end

    def self.record_add_types(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/addTypes API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Types#API-method%3A-%2Fclass-xxxx%2FaddTypes
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/addTypes", input_params, opts)
    end

    def self.record_close(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/close API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Data Object-Lifecycle#API-method%3A-%2Fclass-xxxx%2Fclose
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/close", input_params, opts)
    end

    def self.record_describe(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/describe API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Records#API-method%3A-%2Frecord-xxxx%2Fdescribe
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/describe", input_params, opts)
    end

    def self.record_get_details(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/getDetails API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Details-and-Links#API-method%3A-%2Fclass-xxxx%2FgetDetails
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/getDetails", input_params, opts)
    end

    def self.record_list_projects(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/listProjects API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Cloning#API-method%3A-%2Fclass-xxxx%2FlistProjects
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/listProjects", input_params, opts)
    end

    def self.record_remove_tags(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/removeTags API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Tags#API-method%3A-%2Fclass-xxxx%2FremoveTags
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeTags", input_params, opts)
    end

    def self.record_remove_types(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/removeTypes API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Types#API-method%3A-%2Fclass-xxxx%2FremoveTypes
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/removeTypes", input_params, opts)
    end

    def self.record_rename(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/rename API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Name#API-method%3A-%2Fclass-xxxx%2Frename
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/rename", input_params, opts)
    end

    def self.record_set_details(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/setDetails API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Details-and-Links#API-method%3A-%2Fclass-xxxx%2FsetDetails
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/setDetails", input_params, opts)
    end

    def self.record_set_properties(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/setProperties API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Properties#API-method%3A-%2Fclass-xxxx%2FsetProperties
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/setProperties", input_params, opts)
    end

    def self.record_set_visibility(object_id, input_params={}, opts={})
      # Invokes the /record-xxxx/setVisibility API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Visibility#API-method%3A-%2Fclass-xxxx%2FsetVisibility
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/setVisibility", input_params, opts)
    end

    def self.record_new(input_params={}, opts={})
      # Invokes the /record/new API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Records#API-method%3A-%2Frecord%2Fnew
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/record/new", input_params, opts)
    end

    def self.system_find_affiliates(input_params={}, opts={})
      # Invokes the /system/findAffiliates API method.
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/system/findAffiliates", input_params, opts)
    end

    def self.system_find_apps(input_params={}, opts={})
      # Invokes the /system/findApps API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Search#API-method%3A-%2Fsystem%2FfindApps
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/system/findApps", input_params, opts)
    end

    def self.system_find_data_objects(input_params={}, opts={})
      # Invokes the /system/findDataObjects API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Search#API-method%3A-%2Fsystem%2FfindDataObjects
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/system/findDataObjects", input_params, opts)
    end

    def self.system_find_jobs(input_params={}, opts={})
      # Invokes the /system/findJobs API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Search#API-method%3A-%2Fsystem%2FfindJobs
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/system/findJobs", input_params, opts)
    end

    def self.system_find_projects(input_params={}, opts={})
      # Invokes the /system/findProjects API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Search#API-method%3A-%2Fsystem%2FfindProjects
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/system/findProjects", input_params, opts)
    end

    def self.system_find_users(input_params={}, opts={})
      # Invokes the /system/findUsers API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Search#API-method%3A-%2Fsystem%2FfindUsers
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/system/findUsers", input_params, opts)
    end

    def self.system_find_project_members(input_params={}, opts={})
      # Invokes the /system/findProjectMembers API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Search#API-method:-/system/findProjectMembers
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/system/findProjectMembers", input_params, opts)
    end

    def self.system_greet(input_params={}, opts={})
      # Invokes the /system/greet API method.
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/system/greet", input_params, opts)
    end

    def self.system_shorten_u_r_l(input_params={}, opts={})
      # Invokes the /system/shortenURL API method.
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/system/shortenURL", input_params, opts)
    end

    def self.user_describe(object_id, input_params={}, opts={})
      # Invokes the /user-xxxx/describe API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Users#API-method%3A-%2Fuser-xxxx%2Fdescribe
      opts = { "always_retry" => true }.merge(opts)
      return DX::http_request("/#{object_id}/describe", input_params, opts)
    end

    def self.user_update(object_id, input_params={}, opts={})
      # Invokes the /user-xxxx/update API method.
      # For more info, see: http://wiki.dnanexus.com/API-Specification-v1.0.0/Users#API-method%3A-%2Fuser-xxxx%2Fupdate
      opts = { "always_retry" => false }.merge(opts)
      return DX::http_request("/#{object_id}/update", input_params, opts)
    end

  end
end
